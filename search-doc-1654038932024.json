[{"title":"TypeScript Support","type":0,"sectionRef":"#","url":"docs/typescript","content":"TypeScript Support Type support is available for TypeScript users but still depends on the package being installed through Wally and stored in ReplicatedStorage.Pacakges due to Wally dependencies. npm i --save-dev @rbxts/luanoid Copy","keywords":""},{"title":"Clothing Support","type":0,"sectionRef":"#","url":"docs/clothingSupport","content":"Clothing Support The default way clothing is applied is by setting MeshPart.TextureID on body parts to the clothing's asset ID. This results in textures not supporting transparency and taking on the background color the of asset. Character rigs must also be UV-wrapped to support clothing. In the repository is a Dogu15 rig UV-wrapped by UnitingMatrixXCV. A solution that allows for transparency with body part colors is to use a SurfaceAppearance in each body part with SurfaceAppearance.ColorMap set to the clothing's asset ID. This solution still has problems though such as shirts not being able to overlap the pants on the torso. This solution is not applied as the default because SurfaceAppearance.ColorMap is not a scriptable property. So all clothes used must be generated as SurfaceAppearances before runtime and cloned into the characters when needed.","keywords":""},{"title":"CharacterState","type":0,"sectionRef":"#","url":"api/CharacterState","content":"","keywords":""},{"title":"Properties‚Äã","type":1,"pageTitle":"CharacterState","url":"api/CharacterState#properties","content":" "},{"title":"Physics‚Äã","type":1,"pageTitle":"CharacterState","url":"api/CharacterState#Physics","content":"&lt;/&gt; CharacterState.Physics: EnumItem    "},{"title":"Idling‚Äã","type":1,"pageTitle":"CharacterState","url":"api/CharacterState#Idling","content":"&lt;/&gt; CharacterState.Idling: EnumItem    "},{"title":"Walking‚Äã","type":1,"pageTitle":"CharacterState","url":"api/CharacterState#Walking","content":"&lt;/&gt; CharacterState.Walking: EnumItem    "},{"title":"Jumping‚Äã","type":1,"pageTitle":"CharacterState","url":"api/CharacterState#Jumping","content":"&lt;/&gt; CharacterState.Jumping: EnumItem    "},{"title":"Falling‚Äã","type":1,"pageTitle":"CharacterState","url":"api/CharacterState#Falling","content":"&lt;/&gt; CharacterState.Falling: EnumItem    "},{"title":"Dead‚Äã","type":1,"pageTitle":"CharacterState","url":"api/CharacterState#Dead","content":"&lt;/&gt; CharacterState.Dead: EnumItem   "},{"title":"Custom Animators","type":0,"sectionRef":"#","url":"docs/customAnimators","content":"Custom Animators Animators simply need to be tables with at least the following functions. local Animator = {} function Animator.LoadAnimation(animation, name) end function Animator.PlayAnimation(name) end function Animator.StopAnimation(name) end function Animator.StopAnimations() end return Animator Copy","keywords":""},{"title":"Custom CharacterControllers","type":0,"sectionRef":"#","url":"docs/customCharacterControllers","content":"","keywords":""},{"title":"Customizing provided controller‚Äã","type":1,"pageTitle":"Custom CharacterControllers","url":"docs/customCharacterControllers#customizing-provided-controller","content":"To add to existing behavior we simply need to bind to the events that fire when the state is entered or left or running. In this example the character will float in the air when walking and on every step of the simulation they walk faster. local npc = Luanoid.new() npc.CharacterController.States[Luanoid.CharacterState.Walking].Entered:Connect(function() npc.HipHeight += 10 end) npc.CharacterController.States[Luanoid.CharacterState.Walking].Leaving:Connect(function() npc.HipHeight -= 10 npc.WalkSpeed = 16 end) npc.CharacterController.States[Luanoid.CharacterState.Walking].Step:Connect(function() npc.WalkSpeed += 0.1 end) Copy To remove behavior we can just disconnect all connections to the events. The code sample below will remove the automatic playing and pausing of the Walking animation. local npc = Luanoid.new() npc.CharacterController.States[Luanoid.CharacterState.Walking].Entered:DisconnectAll() npc.CharacterController.States[Luanoid.CharacterState.Walking].Leaving:DisconnectAll() Copy "},{"title":"Starting from scratch‚Äã","type":1,"pageTitle":"Custom CharacterControllers","url":"docs/customCharacterControllers#starting-from-scratch","content":"CharacterControllers simply need to be tables with at least a Start() and Stop() function. It is suggestioned to look at the provided CharacterController as a guide for writing your own. local CharacterController = {} function CharacterController.Start() end function CharacterController.Stop() --[[ NOTE: Your CharacterController will automatically be stopped if a new CharacterController is assigned, the Luanoid is being destroyed, or the character is parented outside the Workspace. ]] end return CharacterController Copy Forces to use to move and orient the character Luanoid.MoverLuanoid.Aligner Properties to take into consideration for determining state Luanoid.MoveDirectionLuanoid.LookDirectionLuanoid.HealthLuanoid.WalkSpeedLuanoid.JumpPowerLuanoid.HipHeightLuanoid.MaxSlopeAngleLuanoid.AutoRotateLuanoid.Jump Properties to update Luanoid.Floor Events to fire when states change Luanoid.DiedLuanoid.FreeFallingLuanoid.Jumping "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"docs/intro","content":"","keywords":""},{"title":"Installation‚Äã","type":1,"pageTitle":"Getting Started","url":"docs/intro#installation","content":"Luanoid can be installed with Wally by adding it to the [dependencies] section of yourwally.toml file. [package] name = &quot;your_name/your_project&quot; version = &quot;0.1.0&quot; registry = &quot;https://github.com/UpliftGames/wally-index&quot; realm = &quot;shared&quot; [dependencies] Luanoid = &quot;raphtalia/luanoid@^1&quot; Copy "},{"title":"Usage‚Äã","type":1,"pageTitle":"Getting Started","url":"docs/intro#usage","content":"The example below it will create a Luanoid character and have it walk somewhere. local Players = game:GetService(&quot;Players&quot;) local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Luanoid = require(ReplicatedStorage.Packages.Luanoid) -- L15 is used to abbreviate Luanoid R15 local l15 = Luanoid.new() l15:SetRig(ReplicatedStorage.DoguXCV:Clone()) l15.Character.Parent = workspace l15:ApplyDescription(Players:GetHumanoidDescriptionFromUserId(72938051), Enum.HumanoidRigType.R15) l15.CharacterController:Start() -- MoveTo() returns a Promise if l15:MoveTo(Vector3.new(32, 0, 32)):expect() then print(&quot;reached target! :D&quot;) else print(&quot;failed to reach target :(&quot;) end Copy In the top-level examplesdirectory there are binaries and source-code for for examples withserver-side characterswhich is the same behavior as normal Roblox characters. Then there is an example ofclient-side characterswhere on the server each character is represented only as a HumanoidRootPart and the client applies the rig and cosmetics. The source-code is reliant on a character model that cannot be synced with Rojo so for quick access you can download the binaries, or download the character model from the assets directory and place it in ReplicatedStorage. "},{"title":"Limitations‚Äã","type":1,"pageTitle":"Getting Started","url":"docs/intro#limitations","content":"‚úÖ - Fully supported‚ö†Ô∏è - Partially supportedüîú - Not yet supported‚ùå - Will not be supported Feature\tStatus\tNotesAccessories\t‚úÖ Packages\t‚ö†Ô∏è\tAnthro packages will not be skinned properly work due to the lack of a Humanoid Clothing\t‚ö†Ô∏è\tSee Clothing Support Animations\t‚úÖ Swimming\tüîú Climbing\tüîú\tImplementation will likely require climbable Instances to have a &quot;Climbable&quot; tag Sitting\tüîú Custom CharacterStates\tüîú\tEasier for developers to use their own CharacterStates Tools\t‚ùå\tAt most support for equipping/dequipping tools may be added, any further support would be difficult due to lack of support with non-humanoid characters "},{"title":"Animator","type":0,"sectionRef":"#","url":"api/Animator","content":"","keywords":""},{"title":"Properties‚Äã","type":1,"pageTitle":"Animator","url":"api/Animator#properties","content":" "},{"title":"Luanoid‚Äã","type":1,"pageTitle":"Animator","url":"api/Animator#Luanoid","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Animator.Luanoid: Luanoid Reference to the Luanoid this CharacterController is attached to.  "},{"title":"AnimationController‚Äã","type":1,"pageTitle":"Animator","url":"api/Animator#AnimationController","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Animator.AnimationController: AnimationController  Reference to the AnimationController used internally.  "},{"title":"Animator‚Äã","type":1,"pageTitle":"Animator","url":"api/Animator#Animator","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Animator.Animator: Animator Reference to the Animator used internally.  "},{"title":"AnimationTracks‚Äã","type":1,"pageTitle":"Animator","url":"api/Animator#AnimationTracks","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Animator.AnimationTracks: {[string]:¬†AnimationTrack } References to the loaded AnimationTracks.  "},{"title":"AnimationPlayed‚Äã","type":1,"pageTitle":"Animator","url":"api/Animator#AnimationPlayed","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Animator.AnimationPlayed: Signal&lt;(animationTrack:¬†AnimationTrack )&gt; Fires after PlayAnimation() is executed.  "},{"title":"AnimationStopped‚Äã","type":1,"pageTitle":"Animator","url":"api/Animator#AnimationStopped","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Animator.AnimationStopped: Signal&lt;(animationTrack:¬†AnimationTrack )&gt; Fires after StopAnimation() is executed.  "},{"title":"AnimationLoaded‚Äã","type":1,"pageTitle":"Animator","url":"api/Animator#AnimationLoaded","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Animator.AnimationLoaded: Signal&lt;(animationTrack:¬†AnimationTrack )&gt; Fires after LoadAnimation() is executed.  "},{"title":"AnimationUnloading‚Äã","type":1,"pageTitle":"Animator","url":"api/Animator#AnimationUnloading","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Animator.AnimationUnloading: Signal&lt;(animationTrack:¬†AnimationTrack )&gt; Fires while UnloadAnimation() is executing. "},{"title":"Functions‚Äã","type":1,"pageTitle":"Animator","url":"api/Animator#functions","content":" "},{"title":"LoadAnimation‚Äã","type":1,"pageTitle":"Animator","url":"api/Animator#LoadAnimation","content":"&lt;/&gt; Animator:LoadAnimation( name:¬†string, animation:¬†Animation ) ‚Üí¬†AnimationTrack  Loads an animation into the Animator under a name that can be used to play it later.  "},{"title":"PlayAnimation‚Äã","type":1,"pageTitle":"Animator","url":"api/Animator#PlayAnimation","content":"&lt;/&gt; Animator:PlayAnimation( name:¬†string, ...:¬†any ) ‚Üí¬†() Plays an animation loaded previously. Remaining arguments are passed toAnimationTrack:Play().  "},{"title":"StopAnimation‚Äã","type":1,"pageTitle":"Animator","url":"api/Animator#StopAnimation","content":"&lt;/&gt; Animator:StopAnimation( name:¬†string, ...:¬†any ) ‚Üí¬†() Stops a playing AnimationTrack. Remaining arguments are passed toAnimationTrack:Stop().  "},{"title":"StopAnimations‚Äã","type":1,"pageTitle":"Animator","url":"api/Animator#StopAnimations","content":"&lt;/&gt; Animator:StopAnimations(...:¬†any) ‚Üí¬†() Stops all currently playing AnimationTracks. Arguments are passed toAnimationTrack:Stop().  "},{"title":"UnloadAnimation‚Äã","type":1,"pageTitle":"Animator","url":"api/Animator#UnloadAnimation","content":"&lt;/&gt; Animator:UnloadAnimation(name:¬†string) ‚Üí¬†() Unloads an animation from the Animator.  "},{"title":"UnloadAnimations‚Äã","type":1,"pageTitle":"Animator","url":"api/Animator#UnloadAnimations","content":"&lt;/&gt; Animator:UnloadAnimations() ‚Üí¬†() Unloads all animations from the Animator. "},{"title":"CharacterController","type":0,"sectionRef":"#","url":"api/CharacterController","content":"","keywords":""},{"title":"Properties‚Äã","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#properties","content":" "},{"title":"Luanoid‚Äã","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#Luanoid","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CharacterController.Luanoid: Luanoid Reference to the Luanoid this CharacterController is attached to.  "},{"title":"RaycastParams‚Äã","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#RaycastParams","content":"&lt;/&gt; CharacterController.RaycastParams: RaycastParams RaycastParams used to cast to the ground underneath the Luanoid's character.  "},{"title":"CanRedirectJump‚Äã","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#CanRedirectJump","content":"&lt;/&gt; CharacterController.CanRedirectJump: boolean Whether or not the Luanoid can &quot;walk&quot; when jumping. Default istrue to behave more like Humanoids.  "},{"title":"Running‚Äã","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#Running","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CharacterController.Running: boolean Whether the CharacterController is currently running.  "},{"title":"FiniteStateMachine‚Äã","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#FiniteStateMachine","content":"&lt;/&gt; CharacterController.FiniteStateMachine: (characterController:¬†CharacterController)¬†‚Üí¬†CharacterState Callback that returns a CharacterState the Luanoid should currently be in.  "},{"title":"States‚Äã","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#States","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CharacterController.States: {[CharacterState]:¬†{ Entered:¬†Signal, Leaving:¬†Signal, Step:¬†Signal }} Table of signals fired when a state is entered, leaving, or stepped.  "},{"title":"LastState‚Äã","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#LastState","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CharacterController.LastState: CharacterState The previous CharacterState applied to the Launoid.  "},{"title":"StateEnterTick‚Äã","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#StateEnterTick","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CharacterController.StateEnterTick: number The time the Luanoid entered its current CharacterState using tick().  "},{"title":"StateEnterPosition‚Äã","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#StateEnterPosition","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CharacterController.StateEnterPosition: Vector3  The position the Luanoid entered its current CharacterState.  "},{"title":"RaycastResult‚Äã","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#RaycastResult","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CharacterController.RaycastResult: RaycastResult The CharacterController casts a ray to the ground from the corners and center of the RootPart. This is the result of the ray hitting closest to the RootPart.  "},{"title":"RaycastResults‚Äã","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#RaycastResults","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CharacterController.RaycastResults: {RaycastResult} All rays casted by the CharacterController on this step of the simulation.  "},{"title":"Stores‚Äã","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#Stores","content":"&lt;/&gt; CharacterController.Stores: {[string]:¬†any} Container for data to be stored and shared between the state handlers and FiniteStateMachine. "},{"title":"Functions‚Äã","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#functions","content":" "},{"title":"new‚Äã","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#new","content":"&lt;/&gt; CharacterController.new( luanoid:¬†Luanoid, states:¬†CharacterState, fsm:¬†(characterController:¬†CharacterController)¬†‚Üí¬†CharacterState ) ‚Üí¬†CharacterController Creates a new CharacterController.  "},{"title":"CastCollideOnly‚Äã","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#CastCollideOnly","content":"&lt;/&gt; CharacterController:CastCollideOnly( origin:¬†Vector3 , dir:¬†Vector3 ) ‚Üí¬†RaycastResult Casts a ray while ignoring all Instances with CanCollide set to false. Intended for use primarily within the CharacterController.  "},{"title":"GetStateElapsedTime‚Äã","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#GetStateElapsedTime","content":"&lt;/&gt; CharacterController:GetStateElapsedTime() ‚Üí¬†number Returns the elapsed time since the Luanoid entering its current state.  "},{"title":"Start‚Äã","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#Start","content":"&lt;/&gt; CharacterController:Start() ‚Üí¬†() Starts the CharacterController's simulation.  "},{"title":"Stop‚Äã","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#Stop","content":"&lt;/&gt; CharacterController:Stop() ‚Üí¬†() Stops the CharacterController's simulation. "},{"title":"Luanoid","type":0,"sectionRef":"#","url":"api/Luanoid","content":"","keywords":""},{"title":"Properties‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#properties","content":" "},{"title":"CharacterState‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#CharacterState","content":"&lt;/&gt; Luanoid.CharacterState: EnumList&lt;CharacterState&gt;   "},{"title":"Name‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#Name","content":"&lt;/&gt; Luanoid.Name: string A non-unique identifier of the Luanoid  "},{"title":"MoveDirection‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#MoveDirection","content":"&lt;/&gt; Luanoid.MoveDirection: Vector3  Describes the direction that the Luanoid is walking in, as a unit vector along the X/Z axis.  "},{"title":"LookDirection‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#LookDirection","content":"&lt;/&gt; Luanoid.LookDirection: Vector3  Describes the direction that the Luanoid is facing, as a unit vector along the X/Z axis.  "},{"title":"Health‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#Health","content":"&lt;/&gt; Luanoid.Health: number Describes the current health of the Luanoid.  "},{"title":"MaxHealth‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#MaxHealth","content":"&lt;/&gt; Luanoid.MaxHealth: number Describes the maximum health of the Luanoid.  "},{"title":"WalkSpeed‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#WalkSpeed","content":"&lt;/&gt; Luanoid.WalkSpeed: number A reference to a part whose position is trying to be reached by a Luanoid.  "},{"title":"JumpPower‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#JumpPower","content":"&lt;/&gt; Luanoid.JumpPower: number Determines how much upwards force is applied to the Luanoid when jumping.  "},{"title":"HipHeight‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#HipHeight","content":"&lt;/&gt; Luanoid.HipHeight: number Describes the maximum health of the Luanoid.  "},{"title":"MaxSlopeAngle‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#MaxSlopeAngle","content":"&lt;/&gt; Luanoid.MaxSlopeAngle: number Determines the distance off the ground the RootPart should be.  "},{"title":"AutoRotate‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#AutoRotate","content":"&lt;/&gt; Luanoid.AutoRotate: boolean AutoRotate sets whether or not the Luanoid will automatically rotate to face in the direction they are moving in.  "},{"title":"Jump‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#Jump","content":"&lt;/&gt; Luanoid.Jump: boolean If set to true, it will cause the Luanoid to jump.  "},{"title":"Animator‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#Animator","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Luanoid.Animator: Animator A reference to the Animator responsible assigned to the Luanoid.  "},{"title":"CharacterController‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#CharacterController","content":"&lt;/&gt; Luanoid.CharacterController: CharacterController A reference to the CharacterController assigned to the Luanoid.  "},{"title":"Character‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#Character","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Luanoid.Character: Model  A model controlled by the Luanoid  "},{"title":"Floor‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#Floor","content":"&lt;/&gt; Luanoid.Floor: BasePart  A reference to the Instance the Luanoid is currently standing on. If the luanoid isn't standing on anything, the value of this property will be nil. Although this property is not read-only it should only be edited by StateControllers.  "},{"title":"FloorMaterial‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#FloorMaterial","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Luanoid.FloorMaterial: Material  Describes the Material that the Luanoid is currently standing on. If the Luanoid isn‚Äôt standing on anything, the value of this property will be Air.  "},{"title":"Mover‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#Mover","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Luanoid.Mover: VectorForce  A force that is applied to the Luanoid‚Äôs RootPart to move it. Intended only for use in CharacterControllers.  "},{"title":"Aligner‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#Aligner","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Luanoid.Aligner: AlignOrientation  A force that is applied to the Luanoid‚Äôs RootPart to orient it. Intended only for use in CharacterControllers.  "},{"title":"RootPart‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#RootPart","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Luanoid.RootPart: BasePart  A reference to the Luanoid's HumanoidRootPart. Despite Luanoids not having Humanoids the RootPart maintains Humanoid in its name for better compatibility.  "},{"title":"RigChanged‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#RigChanged","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Luanoid.RigChanged: Signal&lt;(character:¬†Model )&gt; Fires after SetRig() finishes executing.  "},{"title":"AccessoryAdded‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#AccessoryAdded","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Luanoid.AccessoryAdded: Signal&lt;(accessory:¬†Accessory |¬†Model |¬†BasePart )&gt; Fires after AddAccessory() finishes executing.  "},{"title":"AccessoryRemoving‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#AccessoryRemoving","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Luanoid.AccessoryRemoving: Signal&lt;(accessory:¬†Accessory |¬†Model |¬†BasePart )&gt; Fires after RemoveAccessory() finishes executing.  "},{"title":"Died‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#Died","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Luanoid.Died: Signal&lt;(isDead:¬†boolean)&gt; Fires after entering or while leaving CharacterState.Dead  "},{"title":"FreeFalling‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#FreeFalling","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Luanoid.FreeFalling: Signal&lt;(isFreeFalling:¬†boolean)&gt; Fires after entering or while leaving CharacterState.FreeFalling  "},{"title":"HealthChanged‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#HealthChanged","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Luanoid.HealthChanged: Signal&lt;(newHealth:¬†number)&gt; Fires after Health is changed  "},{"title":"Jumping‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#Jumping","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Luanoid.Jumping: Signal&lt;(isJumping:¬†boolean)&gt; Fires after entering or while leaving CharacterState.Jumping  "},{"title":"MoveToFinished‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#MoveToFinished","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Luanoid.MoveToFinished: Signal&lt;(success:¬†boolean)&gt; Fires after a promise from MoveTo() resolves.  "},{"title":"Seated‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#Seated","content":"This item is read only and cannot be modified. Read Only unreleased &lt;/&gt; Luanoid.Seated: Signal&lt;&gt;   "},{"title":"StateChanged‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#StateChanged","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Luanoid.StateChanged: Signal&lt;(newState:¬†CharacterState)&gt; Fires after the Luanoid's state is changed.  "},{"title":"Touched‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#Touched","content":"This item is read only and cannot be modified. Read Only unreleased &lt;/&gt; Luanoid.Touched: Signal&lt;&gt;   "},{"title":"Destroying‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#Destroying","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Luanoid.Destroying: Signal&lt;&gt; Fires while Destroy() is executing. "},{"title":"Functions‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#functions","content":" "},{"title":"new‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#new","content":"&lt;/&gt; Luanoid.new(existingCharacter:¬†Model ) ‚Üí¬†Luanoid Creates a new Luanoid.  "},{"title":"Destroy‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#Destroy","content":"&lt;/&gt; Luanoid:Destroy() ‚Üí¬†() Destroys the Luanoid.  "},{"title":"SetRig‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#SetRig","content":"&lt;/&gt; Luanoid:SetRig(rig:¬†Model ) ‚Üí¬†() Assigns a rigged model as the Luanoid's character.  "},{"title":"RemoveRig‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#RemoveRig","content":"&lt;/&gt; Luanoid:RemoveRig() ‚Üí¬†() Removes the Luanoid's current character rig.  "},{"title":"ApplyDescription‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#ApplyDescription","content":"&lt;/&gt; Luanoid:ApplyDescription( humanoidDescription:¬†HumanoidDescription , rigType:¬†HumanoidRigType ) ‚Üí¬†() Makes the character's look match that of the passed in HumanoidDescription. If no rigType is provided a new rig will not be applied. Setting HumanoidDescription.Shirt and HumanoidDescription.Pants to any negative value will have it ignore the rig's current shirt and pants rather than clearing them.  "},{"title":"GetAppliedDescription‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#GetAppliedDescription","content":"unreleased &lt;/&gt; Luanoid:GetAppliedDescription() ‚Üí¬†HumanoidDescription  Returns HumanoidDescription which describes its current look.  "},{"title":"BuildRigFromAttachments‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#BuildRigFromAttachments","content":"&lt;/&gt; Luanoid:BuildRigFromAttachments() ‚Üí¬†() Assembles a tree of Motor6D joints by attaching together Attachment objects in a Luanoid's character.  "},{"title":"TakeDamage‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#TakeDamage","content":"&lt;/&gt; Luanoid:TakeDamage(damage:¬†number) ‚Üí¬†() Lowers the health of the Luanoid by the given positive amount.  "},{"title":"Move‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#Move","content":"&lt;/&gt; Luanoid:Move( moveDirection:¬†Vector3 , relativeToCamera:¬†boolean? ) ‚Üí¬†() Causes the Lumanoid to walk in the given direction.  "},{"title":"MoveTo‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#MoveTo","content":"&lt;/&gt; Luanoid:MoveTo( location:¬†Vector3? , part:¬†BasePart? , targetRadius:¬†number?, timeout:¬†number? ) ‚Üí¬†Promise&lt;boolean&gt; Causes the Luanoid to attempt to walk to the given location and part. Use a timeout of 0 for no timeout. The returned promise can also be cancelled.  "},{"title":"AddAccessory‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#AddAccessory","content":"&lt;/&gt; Luanoid:AddAccessory( accessory:¬†Accessory |¬†Model |¬†BasePart , base:¬†(Attachment |¬†BasePart )?, pivot:¬†CFrame? ) ‚Üí¬†() Adds an accessory to the Luanoid's character.  "},{"title":"RemoveAccessory‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#RemoveAccessory","content":"&lt;/&gt; Luanoid:RemoveAccessory(accessory:¬†Accessory |¬†Model |¬†BasePart ) ‚Üí¬†() Removes an accessory from the Luanoid's character.  "},{"title":"GetAccessories‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#GetAccessories","content":"&lt;/&gt; Luanoid:GetAccessories() ‚Üí¬†{(Accessory |¬†Model |¬†BasePart )} Returns a list of all accessories attached to the Luanoid.  "},{"title":"RemoveAccessories‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#RemoveAccessories","content":"&lt;/&gt; Luanoid:RemoveAccessories() ‚Üí¬†() Removes all accessories from the Luanoid.  "},{"title":"GetNetworkOwner‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#GetNetworkOwner","content":"&lt;/&gt; Luanoid:GetNetworkOwner() ‚Üí¬†Player  Returns the current player who is the network owner of the Luanoid, or nil in case of the server.  "},{"title":"SetNetworkOwner‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#SetNetworkOwner","content":"&lt;/&gt; Luanoid:SetNetworkOwner(player:¬†Player ) ‚Üí¬†() Sets the given player as network owner for this Luanoid. When player is nil, the server will be the owner instead of a player.  "},{"title":"IsNetworkOwner‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#IsNetworkOwner","content":"&lt;/&gt; Luanoid:IsNetworkOwner() ‚Üí¬†boolean Returns if the current machine is the network owner of the Luanoid.  "},{"title":"GetState‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#GetState","content":"&lt;/&gt; Luanoid:GetState() ‚Üí¬†CharacterState Returns the Luanoid's current CharacterState.  "},{"title":"ChangeState‚Äã","type":1,"pageTitle":"Luanoid","url":"api/Luanoid#ChangeState","content":"&lt;/&gt; Luanoid:ChangeState(state:¬†CharacterState) ‚Üí¬†() Set the Luanoid to the given CharacterState. "}]